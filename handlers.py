from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.analyzer import get_answer
from services.balance import get_balance
from services.stats import (
    save_user_query,
    get_user_stats,
    get_daily_stats,
    get_popular_queries,
    get_popular_sections,
    export_queries_to_excel,
    get_all_queries,
    get_all_users
)
from utils.logging import logger
import os

router = Router()


class StatsStates(StatesGroup):
    waiting_for_stats_period = State()
    waiting_for_export_period = State()


@router.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ HRlink.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö, "
        '–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ ''<u><b><a href="https://wiki.hr-link.ru/bin/view/Main/">–±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</a></b></u>.\n\n'
        "–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ <b><u>–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏</u></b> –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n"
        "–í —ç—Ç–∏—Ö —Å—Å—ã–ª–∫–∞—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n\n"
        "<b>–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/balance - –±–∞–ª–∞–Ω—Å API\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
    )


@router.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:\n\n"
        "- –ù–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö\n"
        "- –£—Å–ª–æ–≤–∏—è—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n"
        "- –ö–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö\n\n"
        '–í—Å–µ –æ—Ç–≤–µ—Ç—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ <u><b><a href="https://wiki.hr-link.ru/bin/view/Main/">–±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</a></b></u>.\n\n'
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/balance - –±–∞–ª–∞–Ω—Å API\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\n"
        "<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!</b>"
    )


@router.message(Command("balance"))
async def handle_balance(message: Message):
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
        balance = await get_balance()
        if balance is None:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "1. –ù–µ –≤–∫–ª—é—á–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞' –¥–ª—è API-–∫–ª—é—á–∞\n"
                "2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ ProxyAPI\n"
                "3. –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ ProxyAPI."
            )
        else:
            await message.answer(
                f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}</code> —Ä—É–±.\n\n"
                "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞.")


@router.message(Command("stats"))
async def handle_stats(message: Message):
    logger.info(f"–í—ã–∑–æ–≤ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        if message.from_user.id != 281146928:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
            await message.answer(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        stats = get_user_stats()
        daily_stats = get_daily_stats(7)
        popular_sections = get_popular_sections(5)  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

        response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        response += f"üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_queries']}</b>\n"
        response += f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (30 –¥–Ω–µ–π): <b>{stats['active_users']}</b>\n"
        response += f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{stats['avg_queries_per_user']:.1f}</b>\n\n"

        response += "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
        for day in daily_stats:
            response += f"  {day['date']}: {day['total_queries']} –∑–∞–ø—Ä–æ—Å–æ–≤, {day['unique_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

        response += "\nüìö <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
        if popular_sections:
            for i, (section, count) in enumerate(popular_sections, 1):
                section_display = section[:50] + "..." if len(section) > 50 else section
                response += f"{i}. {section_display} ({count} –∑–∞–ø—Ä–æ—Å–æ–≤)\n"
        else:
            response += "üì≠ –†–∞–∑–¥–µ–ª—ã –µ—â–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥",
                    callback_data="stats_period"),
                InlineKeyboardButton(
                    text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    callback_data="list_users"),
            ],
            [InlineKeyboardButton(
                text="üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
                callback_data="export_period")]
        ])

        await message.answer(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.callback_query(lambda c: c.data == "stats_period")
async def handle_stats_period(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StatsStates.waiting_for_stats_period)
    await callback.message.answer(
        "üìÖ <b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n"
        "üîπ <code>1_day</code> ‚Äî –∑–∞ 1 –¥–µ–Ω—å\n"
        "üîπ <code>1_week</code> ‚Äî –∑–∞ 1 –Ω–µ–¥–µ–ª—é\n"
        "üîπ <code>1_month</code> ‚Äî –∑–∞ 1 –º–µ—Å—è—Ü\n"
        "üîπ <code>1_year</code> ‚Äî –∑–∞ 1 –≥–æ–¥\n"
        "üîπ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n"
        "üîπ <code>–º–º.–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü\n"
        "üîπ <code>–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1_day</code>, <code>17.09.2025</code>, <code>09.2025</code>, <code>2025</code>"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "export_period")
async def handle_export_period(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StatsStates.waiting_for_export_period)
    await callback.message.answer(
        "üìÖ <b>–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel:</b>\n\n"
        "üîπ <code>1_day</code> ‚Äî –∑–∞ 1 –¥–µ–Ω—å\n"
        "üîπ <code>1_week</code> ‚Äî –∑–∞ 1 –Ω–µ–¥–µ–ª—é\n"
        "üîπ <code>1_month</code> ‚Äî –∑–∞ 1 –º–µ—Å—è—Ü\n"
        "üîπ <code>1_year</code> ‚Äî –∑–∞ 1 –≥–æ–¥\n"
        "üîπ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n"
        "üîπ <code>–º–º.–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü\n"
        "üîπ <code>–≥–≥–≥–≥</code> ‚Äî –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1_day</code>, <code>17.09.2025</code>, <code>09.2025</code>, <code>2025</code>"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "list_users")
async def handle_list_users(callback: CallbackQuery):
    try:
        users = get_all_users()
        if not users:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        response = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for i, user in enumerate(users, 1):
            response += f"{i}. <b>ID:</b> {user['user_id']}\n"
            response += f"   <b>–ò–º—è:</b> {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"   <b>Username:</b> @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"   <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {user['total_queries']}\n\n"
        await callback.message.answer(response)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)


@router.message(F.text & (
    F.text.startswith("1_day") |
    F.text.startswith("1_week") |
    F.text.startswith("1_month") |
    F.text.startswith("1_year") |
    F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$") |  # –¥–¥.–º–º.–≥–≥–≥–≥
    F.text.regexp(r"^\d{2}\.\d{4}$") |         # –º–º.–≥–≥–≥–≥
    F.text.regexp(r"^\d{4}$")                  # –≥–≥–≥–≥
), StatsStates.waiting_for_export_period)
async def handle_export_period_request(message: Message, state: FSMContext):
    try:
        period = message.text.strip()
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        file_path = export_queries_to_excel(period)
        
        if file_path and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file = FSInputFile(file_path)
            await message.answer_document(
                document=file,
                caption=f"üìä –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}"
            )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤—ã–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤ Excel: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.clear()


@router.message(F.text & (
    F.text.startswith("1_day") |
    F.text.startswith("1_week") |
    F.text.startswith("1_month") |
    F.text.startswith("1_year") |
    F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$") |  # –¥–¥.–º–º.–≥–≥–≥–≥
    F.text.regexp(r"^\d{2}\.\d{4}$") |         # –º–º.–≥–≥–≥–≥
    F.text.regexp(r"^\d{4}$")                  # –≥–≥–≥–≥
), StatsStates.waiting_for_stats_period)
async def handle_stats_period_request(message: Message, state: FSMContext):
    period = message.text.strip()
    queries = get_all_queries(period)
    if not queries:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
        
    page = 0
    queries_per_page = 5
    total_pages = (len(queries) + queries_per_page - 1) // queries_per_page
    
    response = f"üìã <b>–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ {period}:</b>\n\n"
    start_index = page * queries_per_page
    end_index = min((page + 1) * queries_per_page, len(queries))
    
    for i, query in enumerate(queries[start_index:end_index], start_index + 1):
        response += f"{i}. <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {query['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        response += f"   <b>–í–æ–ø—Ä–æ—Å:</b> {query['question']}\n"
        response += f"   <b>–î–∞—Ç–∞:</b> {query['created_at']}\n\n"
    
    if total_pages > 1:
        pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{period}_{page}_prev"),
                InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="ignore"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{period}_{page}_next"),
            ],
            [InlineKeyboardButton(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_queries")]
        ])
        await message.answer(response, reply_markup=pagination_keyboard)
    else:
        await message.answer(response)
    
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("page_"))
async def handle_queries_pagination(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: page_1_day_0_next –∏–ª–∏ page_17.09.2025_0_prev
        if len(parts) < 4:
            raise ValueError(f"Unexpected callback_data format: {callback.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏
        period_parts = parts[1:-2]  # –í—Å–µ —á–∞—Å—Ç–∏ –º–µ–∂–¥—É "page" –∏ –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        period = "_".join(period_parts)
        page = int(parts[-2])
        action = parts[-1]
        
        queries = get_all_queries(period)
        if not queries:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
            
        queries_per_page = 5
        total_pages = (len(queries) + queries_per_page - 1) // queries_per_page
        
        if action == "prev":
            page -= 1
        elif action == "next":
            page += 1
            
        if page < 0:
            page = 0
        elif page >= total_pages:
            page = total_pages - 1
            
        response = f"üìã <b>–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ {period}:</b>\n\n"
        start_index = page * queries_per_page
        end_index = min((page + 1) * queries_per_page, len(queries))
        
        for i, query in enumerate(queries[start_index:end_index], start_index + 1):
            response += f"{i}. <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {query['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            response += f"   <b>–í–æ–ø—Ä–æ—Å:</b> {query['question']}\n"
            response += f"   <b>–î–∞—Ç–∞:</b> {query['created_at']}\n\n"
            
        pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{period}_{page}_prev"),
                InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="ignore"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{period}_{page}_next"),
            ],
            [InlineKeyboardButton(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_queries")]
        ])
        
        await callback.message.edit_text(response, reply_markup=pagination_keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)




@router.callback_query(lambda c: c.data == "close_queries")
async def handle_close_queries(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()


@router.message(F.text)
async def handle_question(message: Message):
    try:
        if len(message.text) < 3:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.")
            return

        searching_text = '‚è≥ –ò—â—É –æ—Ç–≤–µ—Ç, —Å–º–æ—Ç—Ä—é –≤ <a href="https://wiki.hr-link.ru/bin/view/Main/">–±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</a>, –æ–∂–∏–¥–∞–π—Ç–µ...'
        searching_msg = await message.answer(searching_text)
        await message.bot.send_chat_action(message.chat.id, "typing")
        answer, section = await get_answer(message.text)
        save_user_query(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            question=message.text,
            answer=answer[:500] if answer else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç",
            section=section
        )
        await searching_msg.delete()
        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.answer(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
